import pandas as pd
import numpy as np
import transform_data as data
import telebot
import authorization
from telebot import types


track_n = {}
list_to_user = {}

# dataset_music = data.get_dataset("data_copy3.csv")
# dataset_users = data.get_users("data_users.csv")


bot = telebot.TeleBot(authorization.bot_token())


@bot.message_handler(commands=['start'])
def start(message):
    mess = f'–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name}</b> üëã.\n\n<b>NekkoMusic</b> üéß - –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç, ' \
           f'–∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ —Å ' \
           f'—Ç–æ–±–æ–π –Ω–∞ <u>–æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ üéµ</u>.\n\nüíø –ú—ã –ø–æ–º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –ø–ª–µ–π–ª–∏—Å—Ç –º–µ—á—Ç—ã! üíø\n\n–ù–∞–ø–∏—à–∏ /menu, ' \
           f'—á—Ç–æ–±—ã –Ω–∞—Å–ª–∞–¥–∏—Ç—Å—è ' \
           f'–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–∑—Ü–∏—è–º–∏.\n '
    track_n[message.from_user.id] = 0
    bot.send_message(message.from_user.id, mess, parse_mode='html')


@bot.message_handler(commands=['menu'])
def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    recommendations = types.KeyboardButton('üëã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
    like_playlist = types.KeyboardButton('üéº –ü–ª–µ–π–ª–∏—Å—Ç –ª–∞–π–∫–æ–≤ ‚ù§')
    help_call = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')

    markup.add(recommendations, like_playlist, help_call)
    bot.send_message(message.chat.id,
                     f'–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏:\n'
                     f'üëã<b> –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b> - —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è —Ç–µ–±—è –ø–ª–µ–π–ª–∏—Å—Ç,\n'
                     f'üéº<b> –ü–ª–µ–π–ª–∏—Å—Ç –ª–∞–π–∫–æ–≤</b> ‚ù§ - —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è —Ç–µ–±—è,\n'
                     f'‚ùì<b> –ü–æ–º–æ—â—å</b> - —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.\n',
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(
    content_types=["text", "audio", "document", "photo", "sticker", "video", "video_note", "voice", "location",
                   "contact",
                   "new_chat_members", "left_chat_member", "new_chat_title", "new_chat_photo", "delete_chat_photo",
                   "group_chat_created", "supergroup_chat_created", "channel_chat_created", "migrate_to_chat_id",
                   "migrate_from_chat_id", "pinned_message"])
def get_mode(message):
    dataset_music = data.get_dataset("data_copy3.csv")
    dataset_users = data.get_users("data_users.csv")

    if message.text == "üëã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
        if message.from_user.id in (dataset_users["id"].to_numpy()):
            favorite = dataset_users.loc[dataset_users.id == message.from_user.id]
            user_favorite = favorite.iloc[0]["likelist"]
        else:
            user_favorite = []

        list_to_user[message.from_user.id] = data.get_list(dataset_music, user_favorite)

        like_dislike(message)

    elif message.text == "üéº –ü–ª–µ–π–ª–∏—Å—Ç –ª–∞–π–∫–æ–≤ ‚ù§":
        liked_playlist(message)

    elif message.text == "‚ùì –ü–æ–º–æ—â—å":
        help_menu(message)

    else:
        bot.send_message(message.from_user.id, text="–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é ü§î")
        menu(message)


def like_dislike(message):
    kb = types.InlineKeyboardMarkup(row_width=3)
    btn0 = types.InlineKeyboardButton(text='‚ù§', callback_data='‚ù§')
    btn1 = types.InlineKeyboardButton(text='üíî', callback_data='üíî')
    btn2 = types.InlineKeyboardButton(text='üö™', callback_data='üö™')
    kb.add(btn0, btn1, btn2)

    track_to_user = list_to_user[message.from_user.id].iloc[track_n[message.from_user.id]]
    artist_name = track_to_user.artist_name
    track_name = track_to_user.track_name
    track_text = track_name + " --- " + artist_name + "\n"
    track_n[message.from_user.id] += 1

    if track_n[message.from_user.id] == 20:
        track_n[message.from_user.id] = 0
        bot.send_message(message.from_user.id,
                         text="–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏!",
                         parse_mode='html')
        get_mode(message)

    bot.send_message(message.from_user.id,
                     text=track_text,
                     reply_markup=kb)


def liked_playlist(message):
    dataset_music = data.get_dataset("data_copy3.csv")
    dataset_users = data.get_users("data_users.csv")
    tracks = ""
    if message.from_user.id in dataset_users["id"].unique():
        user_favorite = dataset_users.loc[dataset_users.id == message.from_user.id]
        user_favorite = user_favorite.iloc[0]["likelist"]
        count_likes = len(user_favorite)
    else:
        user_favorite = []
        count_likes = 0

    if count_likes > 0:
        count = 0
        for track in range(0, count_likes):
            track_id = user_favorite[track]
            track_name = dataset_music.loc[dataset_music.id == track_id]
            artist_name = track_name.iloc[0]["artist_name"]
            track_name = track_name.iloc[0]["track_name"]
            track_text = str(track + 1) + ". " + track_name + " --- " + artist_name + "\n"
            tracks += track_text
            count += 1
            if count == 30 or track == count_likes - 1:
                count = 0
                bot.send_message(message.chat.id,
                                 text=tracks,
                                 parse_mode='html')
                tracks = ""
    else:
        bot.send_message(message.chat.id,
                         text="–ö–∞–∂–µ—Ç—Å—è –≤—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª–∏ :c",
                         parse_mode='html')


def help_menu(message):
    bot.send_message(message.from_user.id,
                     f'‚ù§ - –õ–∞–π–∫–Ω—É—Ç—å —Ç—Ä–µ–∫, —á—Ç–æ–±—ã —á–∞—â–µ –µ–≥–æ —Å–ª—ã—à–∞—Ç—å\n'
                     f'üíî - –£–º–µ–Ω—å—à–∏—Ç—å —à–∞–Ω—Å –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏\n'
                     f'üö™ - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n'
                     f'üéº - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤\n',
                     parse_mode='html')


@bot.callback_query_handler(func=lambda callback: callback.data)
def check_callback_data(callback):
    if callback.data == '‚ù§':
        print(list_to_user[callback.message.from_user.id])
        save_liked(callback.message)
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id, text="–≠—Ç–æ—Ç —Ç—Ä–µ–∫ –±—É–¥–µ—Ç —á–∞—â–µ –≤ –≤–∞—à–∏—Ö –Ω–∞—É—à–Ω–∏–∫–∞—Ö! ‚ù§")
        like_dislike(callback.message)
    elif callback.data == 'üíî':
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id, text="–ù–∞–º —Ç–æ–∂–µ –Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–∞ "
                                                                           "–∫–æ–º–ø–æ–∑–∏—Ü–∏—è! ü§¢")
        like_dislike(callback.message)
    elif callback.data == 'üö™':
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–ú—ã —Å–Ω–æ–≤–∞ –≤ –º–µ–Ω—é üñ•Ô∏è")
        menu(callback.message)


def save_liked(message):
    dataset_users = data.get_users("data_users.csv")

    liked_track = list_to_user[message.from_user.id].iloc[track_n[message.from_user.id] - 1]
    id_track = liked_track.id
    count = len(dataset_users.index)  # count of users likes

    if count == 0:
        print("add first")
        new = np.array([id_track])
        new_user = pd.DataFrame({"id": [message.from_user.id],
                                 "likelist": [new]})
        dataset_users = pd.concat([dataset_users, new_user], ignore_index=True)

    elif message.from_user.id in (dataset_users["id"].to_numpy()):
        print("add prev")
        index = dataset_users[dataset_users["id"] == message.from_user.id].index[0]
        new_list = dataset_users.loc[dataset_users.id == message.from_user.id]
        new_list = new_list.iloc[0]["likelist"]
        if id_track not in new_list:
            new_list = np.append(new_list, id_track)
        dataset_users.at[index, "likelist"] = new_list

    else:
        print("add new")
        new = np.array([id_track])
        new_user = pd.DataFrame({"id": [message.from_user.id],
                                 "likelist": [new]})
        dataset_users = pd.concat([dataset_users, new_user], ignore_index=True)

    dataset_users.to_csv("data_users.csv", sep=";", index=False)


bot.polling(none_stop=True, interval=0)